// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  name       String?
  username   String      @unique
  email      String      @unique
  password   String
  comments   Comments[]
  userDetail UserDetail?
  blog       Blog[]
  votes     Vote[]      
}

model UserDetail {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  followers    Int     @default(0)
  following    Int     @default(0)
  bio          String @default("")
  profilePhoto String @default("https://utfs.io/f/2d51fa23-2392-416d-a240-86b930bb32b8-1ufikm.png")
  coverPhoto   String @default("https://utfs.io/f/2d51fa23-2392-416d-a240-86b930bb32b8-1ufikm.png")
  user User  @relation(fields: [userId], references: [id])
}

model Blog {
  id         Int        @id @default(autoincrement())
  authorId   Int
  title      String
  topic      String
  content    String
  thumbnail  String?
  vote       Int        @default(0)
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  Comment    Comments[]
  Prophoto   String     
  Uname      String
  votes     Vote[]
  createdAt DateTime @default(now())
  author     User       @relation( fields: [authorId], references: [id])
}
model Vote {
  id        String   @id @default(uuid())
  type      VoteType
  postId    Int
  post      Blog     @relation(fields: [postId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
model Comments {
  postId   Int    @unique
  accoutId Int    @unique
  id       Int    @id @default(autoincrement())
  content  String
  like     Int    @default(0)
  dislike  Int    @default(0)
  user     User   @relation(fields: [accoutId], references: [id])
  Blog     Blog   @relation(fields: [blogId], references: [id])
  blogId   Int
}
